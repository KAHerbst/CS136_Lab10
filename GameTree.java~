import structure5.*;
import java.util.Iterator;

public class GameTree{
<<<<<<< HEAD
	
    GameTree parent;
    char color;
    HexBoard root;
    Vector<GameTree> children;

=======

    int level;
    HexBoard root;
    Vector<GameTree> children;
>>>>>>> 45d7c69653c6379b8c75be046146850fbdf79624
    /**
     * Creates a "full" GameTree representing every possible state of our hex-a-pawn game
     **/
    //white on top
    GameTree(){
	this.root = new HexBoard();
<<<<<<< HEAD
	this.parent = null;
=======
>>>>>>> 45d7c69653c6379b8c75be046146850fbdf79624
	this.children = new Vector<GameTree>();
	populate();
    }

<<<<<<< HEAD
    GameTree(HexBoard hex, char color){
	this.root = hex;
	this.color = color;
	this.parent = null;
=======
    GameTree(int rows, int cols){
	this.root = new HexBoard(rows, cols);
>>>>>>> 45d7c69653c6379b8c75be046146850fbdf79624
	this.children = new Vector<GameTree>();
	populate();
    }

<<<<<<< HEAD
    public void populate(){
	populateHelper(this,color);
    }

    public void populateHelper(GameTree tree, char player){
	HexBoard currentBoard = tree.root;
	if(currentBoard.win('*') || currentBoard.win('o')) return;
	Iterator<HexMove> moves = currentBoard.moves(player).iterator();
	while(moves.hasNext()){
	    HexBoard nextBoard = new HexBoard(currentBoard, moves.next());
	    GameTree nextMove = new GameTree(nextBoard,player);
	    nextMove.setParent(tree);
	    tree.children.add(nextMove);
=======
    GameTree(HexBoard hex){
	this.root = hex;
	this.children = new Vector<GameTree>();
    }

    public boolean validMove(){
	return true;
    }

    public GameTree move(){
	return null;
    }

    public GameTree remove(){
	return null;
    }

    public void populate(){
	populateHelper(this,'*');
    }

    public void add(){

    }
    
    public void populateHelper(GameTree tree, char player){
	HexBoard currentBoard = tree.root;
	if(currentBoard.win('*') || currentBoard.win('o')) return;
	Iterator<HexMove> moves = currentBoard.moves(currentBoard.opponent(player)).iterator();
	while(moves.hasNext()){
	    GameTree nextMove = new GameTree(new HexBoard(currentBoard, moves.next()));
	    this.children.add(nextMove);
>>>>>>> 45d7c69653c6379b8c75be046146850fbdf79624
	    populateHelper(nextMove,currentBoard.opponent(player));	    
	}
    }

<<<<<<< HEAD
    // post: sets a parent GameTree so you can go back up the tree (for pruning)
    public void setParent(GameTree parent){
	this.parent = parent;
    }

    public String toString(){
	return toStringHelper(this, ""+this.root.toString());
    }
    public String toStringHelper(GameTree current, String str){
	if(current.children.isEmpty()) return current.root.toString() + str;
	Iterator<GameTree> childrenIter = current.children.iterator();
	while(childrenIter.hasNext()){
	    GameTree next = childrenIter.next();
	    System.out.println(next.root);
	    toStringHelper(next,str+next.root.toString());
=======
    public String toString(){
	return toStringHelper(this, "");
    }
    
    public String toStringHelper(GameTree current, String str){
	Iterator<GameTree> childrenIter = current.children.iterator();
	while(childrenIter.hasNext()){
	    GameTree next = childrenIter.next();
	    toStringHelper(next,str+current.root.toString());
>>>>>>> 45d7c69653c6379b8c75be046146850fbdf79624
	}
	return str;
    }

    public static void main(String[] argv){
<<<<<<< HEAD
	GameTree dysron = new GameTree(new HexBoard(),'*');
	System.out.println(dysron);
    }
=======
	GameTree dysron = new GameTree();
	System.out.println(dysron);
    }
    
>>>>>>> 45d7c69653c6379b8c75be046146850fbdf79624
}
